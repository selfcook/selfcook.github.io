[{"title":"二叉树","date":"2020-05-19T14:23:06.718Z","url":"/2020/05/19/%E4%BA%8C%E5%8F%89%E6%A0%91/","content":"1 重点概念1.1 结点概念结点是数据结构中的基础，是构成复杂数据结构的基本组成单位。 1.2 树结点声明本系列文章中提及的结点专指树的结点。例如：结点A在图中表示为： 2 树2.1 定义树（Tree）是n（n&gt;=0)个结点的有限集。n=0时称为空树。在任意一颗非空树中：1）有且仅有一个特定的称为根（Root）的结点；2）当n&gt;1时，其余结点可分为m(m&gt;0)个互不相交的有限集T1、T2、……、Tn，其中每一个集合本身又是一棵树，并且称为根的子树。 此外，树的定义还需要强调以下两点：1）n&gt;0时根结点是唯一的，不可能存在多个根结点，数据结构中的树只能有一个根结点。2）m&gt;0时，子树的个数没有限制，但它们一定是互不相交的。示例树：图2.1为一棵普通的树： 图2.1 普通树 由树的定义可以看出，树的定义使用了递归的方式。递归在树的学习过程中起着重要作用，如果对于递归不是十分了解，建议先看看递归算法 2.2 结点的度结点拥有的子树数目称为结点的度。图2.2中标注了图2.1所示树的各个结点的度。 图2.2 度示意图 2.3 结点关系结点子树的根结点为该结点的孩子结点。相应该结点称为孩子结点的双亲结点。图2.2中，A为B的双亲结点，B为A的孩子结点。同一个双亲结点的孩子结点之间互称兄弟结点。图2.2中，结点B与结点C互为兄弟结点。 2.4 结点层次从根开始定义起，根为第一层，根的孩子为第二层，以此类推。图2.3表示了图2.1所示树的层次关系 图2.3 层示意图 2.5 树的深度树中结点的最大层次数称为树的深度或高度。图2.1所示树的深度为4。 3 二叉树3.1 定义二叉树是n(n&gt;=0)个结点的有限集合，该集合或者为空集（称为空二叉树），或者由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树组成。图3.1展示了一棵普通二叉树： 图3.1 二叉树 3.2 二叉树特点由二叉树定义以及图示分析得出二叉树有以下特点：1）每个结点最多有两颗子树，所以二叉树中不存在度大于2的结点。2）左子树和右子树是有顺序的，次序不能任意颠倒。3）即使树中某结点只有一棵子树，也要区分它是左子树还是右子树。 3.3 二叉树性质1）在二叉树的第i层上最多有2i-1 个节点 。（i&gt;=1）2）二叉树中如果深度为k,那么最多有2k-1个节点。(k&gt;=1）3）n0=n2+1 n0表示度数为0的节点数，n2表示度数为2的节点数。4）在完全二叉树中，具有n个节点的完全二叉树的深度为[log2n]+1，其中[log2n]是向下取整。5）若对含 n 个结点的完全二叉树从上到下且从左至右进行 1 至 n 的编号，则对完全二叉树中任意一个编号为 i 的结点有如下特性： (1) 若 i=1，则该结点是二叉树的根，无双亲, 否则，编号为 [i/2] 的结点为其双亲结点;(2) 若 2i&gt;n，则该结点无左孩子， 否则，编号为 2i 的结点为其左孩子结点；(3) 若 2i+1&gt;n，则该结点无右孩子结点， 否则，编号为2i+1 的结点为其右孩子结点。 3.4 斜树斜树：所有的结点都只有左子树的二叉树叫左斜树。所有结点都是只有右子树的二叉树叫右斜树。这两者统称为斜树。 图3.2 左斜树 图3.3 右斜树 3.5 满二叉树满二叉树：在一棵二叉树中。如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。满二叉树的特点有：1）叶子只能出现在最下一层。出现在其它层就不可能达成平衡。2）非叶子结点的度一定是2。3）在同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多。 图3.4 满二叉树 3.6 完全二叉树完全二叉树：对一颗具有n个结点的二叉树按层编号，如果编号为i(1&lt;=i&lt;=n)的结点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同，则这棵二叉树称为完全二叉树。图3.5展示一棵完全二叉树 图3.5 完全二叉树 特点：1）叶子结点只能出现在最下层和次下层。2）最下层的叶子结点集中在树的左部。3）倒数第二层若存在叶子结点，一定在右部连续位置。4）如果结点度为1，则该结点只有左孩子，即没有右子树。5）同样结点数目的二叉树，完全二叉树深度最小。注：满二叉树一定是完全二叉树，但反过来不一定成立。 3.7 二叉树的存储结构3.7.1 顺序存储二叉树的顺序存储结构就是使用一维数组存储二叉树中的结点，并且结点的存储位置，就是数组的下标索引。 图3.6 图3.6所示的一棵完全二叉树采用顺序存储方式，如图3.7表示： 图3.7 顺序存储 由图3.7可以看出，当二叉树为完全二叉树时，结点数刚好填满数组。那么当二叉树不为完全二叉树时，采用顺序存储形式如何呢？例如：对于图3.8描述的二叉树： 图3.8.png 其中浅色结点表示结点不存在。那么图3.8所示的二叉树的顺序存储结构如图3.9所示： 图3.9 其中，∧表示数组中此位置没有存储结点。此时可以发现，顺序存储结构中已经出现了空间浪费的情况。那么对于图3.3所示的右斜树极端情况对应的顺序存储结构如图3.10所示： 图3.10 由图3.10可以看出，对于这种右斜树极端情况，采用顺序存储的方式是十分浪费空间的。因此，顺序存储一般适用于完全二叉树。 3.7.2 二叉链表既然顺序存储不能满足二叉树的存储需求，那么考虑采用链式存储。由二叉树定义可知，二叉树的每个结点最多有两个孩子。因此，可以将结点数据结构定义为一个数据和两个指针域。表示方式如图3.11所示： 图3.11 定义结点代码： 则图3.6所示的二叉树可以采用图3.12表示。 图3.12 图3.12中采用一种链表结构存储二叉树，这种链表称为二叉链表。 3.8 二叉树遍历二叉树的遍历一个重点考查的知识点。 3.8.1 定义二叉树的遍历是指从二叉树的根结点出发，按照某种次序依次访问二叉树中的所有结点，使得每个结点被访问一次，且仅被访问一次。二叉树的访问次序可以分为四种： 前序遍历中序遍历后序遍历层序遍历 3.8.2 前序遍历前序遍历通俗的说就是从二叉树的根结点出发，当第一次到达结点时就输出结点数据，按照先向左在向右的方向访问。 3.13 图3.13所示二叉树访问如下： 从根结点出发，则第一次到达结点A，故输出A;继续向左访问，第一次访问结点B，故输出B；按照同样规则，输出D，输出H；当到达叶子结点H，返回到D，此时已经是第二次到达D，故不在输出D，进而向D右子树访问，D右子树不为空，则访问至I，第一次到达I，则输出I；I为叶子结点，则返回到D，D左右子树已经访问完毕，则返回到B，进而到B右子树，第一次到达E，故输出E；向E左子树，故输出J；按照同样的访问规则，继续输出C、F、G； 则3.13所示二叉树的前序遍历输出为：ABDHIEJCFG 3.8.3 中序遍历中序遍历就是从二叉树的根结点出发，当第二次到达结点时就输出结点数据，按照先向左在向右的方向访问。 图3.13所示二叉树中序访问如下： 从根结点出发，则第一次到达结点A，不输出A，继续向左访问，第一次访问结点B，不输出B；继续到达D，H；到达H，H左子树为空，则返回到H，此时第二次访问H，故输出H；H右子树为空，则返回至D，此时第二次到达D，故输出D；由D返回至B，第二次到达B，故输出B；按照同样规则继续访问，输出J、E、A、F、C、G； 则3.13所示二叉树的中序遍历输出为：HDIBJEAFCG 3.8.4 后序遍历后序遍历就是从二叉树的根结点出发，当第三次到达结点时就输出结点数据，按照先向左在向右的方向访问。 图3.13所示二叉树后序访问如下： 从根结点出发，则第一次到达结点A，不输出A，继续向左访问，第一次访问结点B，不输出B；继续到达D，H；到达H，H左子树为空，则返回到H，此时第二次访问H，不输出H；H右子树为空，则返回至H，此时第三次到达H，故输出H；由H返回至D，第二次到达D，不输出D；继续访问至I，I左右子树均为空，故第三次访问I时，输出I；返回至D，此时第三次到达D，故输出D；按照同样规则继续访问，输出J、E、B、F、G、C，A； 则图3.13所示二叉树的后序遍历输出为：HIDJEBFGCA虽然二叉树的遍历过程看似繁琐，但是由于二叉树是一种递归定义的结构，故采用递归方式遍历二叉树的代码十分简单。递归实现代码如下： 3.8.5 层次遍历层次遍历就是按照树的层次自上而下的遍历二叉树。针对图3.13所示二叉树的层次遍历结果为：ABCDEFGHIJ层次遍历的详细方法可以参考二叉树的按层遍历法。 3.8.6 遍历常考考点对于二叉树的遍历有一类典型题型。1）已知前序遍历序列和中序遍历序列，确定一棵二叉树。例题：若一棵二叉树的前序遍历为ABCDEF，中序遍历为CBAEDF，请画出这棵二叉树。分析：前序遍历第一个输出结点为根结点，故A为根结点。早中序遍历中根结点处于左右子树结点中间，故结点A的左子树中结点有CB，右子树中结点有EDF。如图3.14所示： 图3.14 按照同样的分析方法，对A的左右子树进行划分，最后得出二叉树的形态如图3.15所示： 图3.15.png 2）已知后序遍历序列和中序遍历序列，确定一棵二叉树。后序遍历中最后访问的为根结点，因此可以按照上述同样的方法，找到根结点后分成两棵子树，进而继续找到子树的根结点，一步步确定二叉树的形态。注：已知前序遍历序列和后序遍历序列，不可以唯一确定一棵二叉树。"},{"title":"对象和类对象","date":"2019-07-14T15:06:55.305Z","url":"/2019/07/14/%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB%E5%AF%B9%E8%B1%A1/","content":"知识点总结OC实例对象的本质: 本质就是是结构体，且只有一个内容-isa指针，指向该类本身。 类对象(objc_class) Objective-C类是由Class类型来表示的，它实际上是一个指向objc_class结构体的指针。 查看objc/runtime.h中objc_class结构体的定义如下： 类对象的isa指针指向元类（metaclass） 元类的isa指针指向root元类（NSObject的metaclass） root元类的isa指向自己 "},{"title":"iOS内存区域","date":"2018-07-27T15:33:14.000Z","url":"/2018/07/27/iOS%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/","categories":["code"],"content":"iOS内存存放的几大区域 栈区(stack)由编译器自动分配并释放，存放函数的参数值，局部变量等。也就是说我们函数括弧“{}”中定义的变量（但不包括static声明的变量）栈是系统数据结构，对应线程/进程是唯一的。优点是快速高效，缺点时有限制，数据不灵活。 堆区(heap)由程序员手动分配和释放，OC一般通过new方法创建对象 ,一般由程序员分配释放，若程序员不释放，程序结束时,可能由OS回收 。（MRC和ARC） 全局区(static静态区)存放未初始化的全局变量和静态变量, 程序结束后由系统释放。 文字常量区存放已经初始化的常量字符串，程序结束后由系统释放。 代码区存放函数的二进制代码 三、全部代码 1.栈区(stack) 由编译器自动分配并释放，存放函数的参数值，局部变量等。栈是系统数据结构，对应线程/进程是唯一的。优点是快速高效，缺点时有限制，数据不灵活。［先进后出］ 栈空间分静态分配 和动态分配两种。 堆区(heap) 由程序员分配和释放，如果程序员不释放，程序结束时，可能会由操作系统回收 ，比如在ios 中 alloc 都是存放在堆中。 优点是灵活方便，数据适应面广泛，但是效率有一定降低。 虽然程序结束时所有的数据空间都会被释放回系统，但是精确的申请内存，释放内存匹配是良好程序的基本要素。 3.全局区(静态区) (static) 全局变量和静态变量的存储是放在一起的，初始化的全局变量和静态变量存放在一块区域，未初始化的全局变量和静态变量在相邻的另一块区域，程序结束后有系统释放。 4.文字常量区 存放常量字符串，程序结束后由系统释放； 5.代码区 存放函数的二进制代码 大致如图： 例子代码： 可能被追问的问题一： 1.栈区 (stack [stæk]): 由编译器自动分配释放 局部变量是保存在栈区的 方法调用的实参也是保存在栈区的 2.堆区 (heap [hiːp]): 由程序员分配释放，若程序员不释放，会出现内存泄漏，赋值语句右侧 使用 new 方法创建的对象，被创建对象的所有 成员变量！ 3.BSS 段 : 程序结束后由系统释放 4.数据段 : 程序结束后由系统释放 5.代码段:程序结束后由系统释放 程序编译链接 后的二进制可执行代码 可能被追问的问题二： 比如申请后的系统是如何响应的？ 栈：存储每一个函数在执行的时候都会向操作系统索要资源，栈区就是函数运行时的内存，栈区中的变量由编译器负责分配和释放，内存随着函数的运行分配，随着函数的结束而释放，由系统自动完成。 注意：只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出。 堆： 1.首先应该知道操作系统有一个记录空闲内存地址的链表。 2.当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。 3 .由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中 可能被追问的问题三： 比如：申请大小的限制是怎样的？ 栈：栈是向低地址扩展的数据结构，是一块连续的内存的区域。是栈顶的地址和栈的最大容量是系统预先规定好的，栈的大小是2M（也有的说是1M，总之是一个编译时就确定的常数 ) ,如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。 堆：堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储的空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。 栈：由系统自动分配，速度较快，不会产生内存碎片 堆：是由alloc分配的内存，速度比较慢，而且容易产生内存碎片，不过用起来最方便"}]